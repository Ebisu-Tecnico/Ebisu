#!/bin/bash

########################################################################
#
# App Branding Functions
#
# 2016 BroadSoft, Inc.
#
# This file contains common fuctions used by the branding scripts.
#
########################################################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Define App Branding Variables
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# constants
declare -r DIRECTIVES="BrandingDirectives.strings"
declare -r RE_NUM="^[0-9]+$"
declare -r RE_BROADSOFT_VERSION="^([0-9]+\.[0-9]+\.[0-9]+)(\.[0-9]+)$"
declare -r RE_BROADSOFT_BUILD_NUMBER="^[$]BroadSoftBuildNumber([0-9]*)$"
declare -r RE_LANG="^([A-Za-z_-]+)\.lproj($|/.*)"
declare -r RE_STRINGS=".+\.strings$"
declare -r RE_PLIST=".+\.b?plist$"
declare -r RE_WAV=".+\.wav$"
declare -r RE_BPLIST_TYPE=".*Apple binary property list.*"
declare -r RE_ASSET_CATALOG="^([A-Za-z_-]+)\.xcassets($|/.*)"

# command constants
declare -r XCRUN=/usr/bin/xcrun
declare -r PLUTIL=/usr/bin/plutil
declare -r SIPS=/usr/bin/sips
declare -r CMP=/usr/bin/cmp

# static variables (set once, used throughout)
declare BRANDKIT
declare BRANDDIR
declare DIRECTIVESPLIST
declare -a ALLOWEDLANGS

# include the appsign environment
source "$(dirname $0)/.appsign.env"
test $? -eq 0 || \
  { echo "failed to load environment: $(dirname $0)/.appsign.env"; exit 1; }

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Assert Branding Environment
#
# Verifies the enviornment is suitable to continue for app branding.
#
# exits on error
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function assertBrandingEnvironment ()
{
  assertSigningEnvironment

  test -x $XCRUN || \
    errExit "Xcode must be installed to perform branding" 1

  test -x $PLUTIL || \
    errExit "cannot find the ${PLUTIL} command" 1

  test -x $SIPS || \
    errExit "cannot find the ${SIPS} command" 1

  test -x $CMP || \
    errExit "cannot find the ${CMP} command" 1

  echo "XCRUN Version $($XCRUN --version)"
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Transfer Resource Function
#
# Transfers a resource file from the branding directory to the
# application directory.  If any format conversions are necessary, this
# function takes care of the details.
#
# Required Global Variables:
#   BRANDDIR  (read)
#   APPDIR  (read)
#   RE_PNG_FILE  (read)
#   RE_STRINGS  (read)
#   RE_BPLIST_TYPE  (read)
#   RE_PLIST  (read)
#
# $1: the resource to transfer
# returns 0 if successful; not 0 otherwise
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function transferResource ()
{
  # create the source and destination resource names
  local s="${BRANDDIR}/${1}"
  local d="${APPDIR}/${1}"
  local -i rc=0

  if [[ $1 =~ $RE_PNG_FILE ]]
  then
    # for images, be sure the source size matches destination size;
    # allow a missing destination file as this may be the case for
    # an added language resource directory
    if [ ! -r "$d" -o "$(imageSize "$s")" = "$(imageSize "$d")" ]
    then
      echo "[PNG] ${s} -> optimizer -> ${d}"
      $XCRUN -sdk iphoneos pngcrush -q -iphone "$s" "$d"
      rc=$?
      if [ $rc -ne 0 ]
      then
        echo "failed to transfer image resource: $1"
        return $rc
      fi
    else
      echo -e "source and destination images sizes are not the same:\n\t$1"
      return 1
    fi
  elif [[ $1 =~ $RE_STRINGS ]]
  then
    if [[ $(/usr/bin/file "$s") =~ $RE_BPLIST_TYPE ]]
    then
      # already binary
      echo -n "[STR] "
      /bin/cp -v "$s" "$d"
    else
      # convert to binary plist
      echo "[STR] ${s} -> convert -> ${d}"
      $PLUTIL -convert binary1 -o "$d" "$s"
    fi
    rc=$?
    if [ $rc -ne 0 ]
    then
      echo "failed to transfer string resource: $1"
      return $rc
    fi
  elif [[ $1 =~ $RE_PLIST ]]
  then
    if [[ $(/usr/bin/file "$s") =~ $RE_BPLIST_TYPE ]]
    then
      # already binary
      echo -n "[PLIST] "
      /bin/cp -v "$s" "$d"
    else
      # convert to binary plist
      echo "[PLIST] ${s} -> convert -> ${d}"
      $PLUTIL -convert binary1 -o "$d" "$s"
    fi
    rc=$?
    if [ $rc -ne 0 ]
    then
      echo "failed to transfer plist resource: $1"
      return $rc
    fi
  else
    # some other resource
    echo -n "[OTHER] "
    /bin/cp -v "$s" "$d"
    rc=$?
    if [ $rc -ne 0 ]
    then
      echo "failed to transfer resource: $1"
      return $rc
    fi
  fi

  return 0
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Image Size
#
# Returns the dimensions of an image.
#
# $1: the image
# echos string size in the form WxH
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function imageSize ()
{
  local -i rc=0
  local size=$($SIPS -g pixelWidth -g pixelHeight "$1" | /usr/bin/awk '{\
    if (NR > 1)
    {
      if (NR > 2)
        printf("x%s", $2)
      else
        printf("%s", $2)
    }
  }')
  rc=$?; test $rc -ne 1 || \
    errExit "failed to extract image size: $(basename $1)" 1
  echo $size
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Branding Kit Resource Directory
#
# This function creates and verifies the branding kit resource
# directory.
#
# Required Global Variables:
#   APPDIR  (read)
#   WORKDIR  (read)
#   BRANDKIT  (read)
#   BRANDDIR  (set)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function createBrandingResourceDirectory ()
{
  if [ -d "$BRANDKIT" ]
  then
    test "$BRANDKIT" != "$APPDIR" || \
      errExit "branding kit directory same as app directory" 1
    BRANDDIR="$BRANDKIT"
    echo -e "Using branding kit directory:\n\t${BRANDDIR}"
  else
    $UNZIP -qq -t "$BRANDKIT"
    local -i rc=$?; (( rc == 0 )) || \
      errExit "branding kit is not a valid ZIP archive" $rc
    echo -e "Using branding kit archive:\n\t${BRANDKIT}"

    BRANDDIR="${WORKDIR}/branding"
    $UNZIP -q -d "$BRANDDIR" "$BRANDKIT"
    rc=$?; (( rc == 0 )) || \
      errExit "failed extract branding kit" $rc
    echo -e "Branding kit archive unpacked to directory:\n\t${BRANDDIR}"
  fi
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Branding Directives Plist
#
# Converts the directives strings file into a Plist.
#
# Required Global Variables:
#   WORKDIR  (read)
#   BRANDDIR  (read)
#   DIRECTIVES  (read)
#   DIRECTIVESPLIST  (set)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function createBrandingDirectivesPlist ()
{
  local -i rc=0
  DIRECTIVESPLIST="${WORKDIR}/${DIRECTIVES%.*}.plist"

  if [ -r "${BRANDDIR}/${DIRECTIVES}" ]
  then
    # convert to a directives plist
    $PLUTIL -convert binary1 -o "$DIRECTIVESPLIST" "${BRANDDIR}/${DIRECTIVES}"
    rc=$?; (( rc == 0 )) || \
      errExit "failed to convert branding directives" $rc
  else
    # create an empty directives plist
    $PLB -c "Clear dict" "$DIRECTIVESPLIST"
    $PLUTIL -convert binary1 "$DIRECTIVESPLIST"
    rc=$?; (( rc == 0 )) || \
      errExit "failed to create branding directives" $rc
  fi
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Verify Branded Application Icons and Launch Images
#
# Verifies the brading directory contains the required branded application
# icons and application launch images as listed in the application Info.plist.
#
# When it detects a missing or not branded resources a warning is echoed.
#
#  Note: Launch Images not being verified anymore
#        Details below...
#
# Required Global Variables:
#   BRANDDIR  (read)
#   CORE_APP_RESOURCES  (read)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function verifyCoreResourcesBranding ()
{
  echo "Verifying application icons branding ..."

  # identify all the App Icons that  need to be verified.
  # These resources are loaded in a global array delcared in appbase.env
  # called: CORE_APP_RESOURCES
  identifyCoreAppResourcesAppIconsOnly

  # Commented out. No launch image verification at the moment.
  # The reason we are not verifying launch images is because some of our
  # applications use a static color image (like white or black) that does
  # not necessarily need to be branded; thus checking for change is obviated.
  # call identifyCoreAppResources instead to identify both, App Icons and Launch Images.

  #local -i count=0
  local pngFile
  # Find if asset catalog for AppIcon is available by searcing for any
  # asset catalog that contains the folder .appiconset
  local assetCatalog=$(find ./${BRANDDIR}/*.xcassets -name *.appiconset)
  for pngFile in ${assetCatalog}/*.png
  do
    local fileName=$(basename $pngFile)
    if [ ! -r "${BRANDDIR}/${fileName}" ]
      then
      echo -e "\twarning: Missing branded resource!\n\t\t${BRANDDIR}/${fileName}"
    else
      cp "${BRANDDIR}/$fileName" "$assetCatalog/"
  fi
  done
  # for pngFile in "${CORE_APP_RESOURCES[@]}"
  # do
  #   if [ ! -r "${BRANDDIR}/${pngFile}" ]
  #   then
  #     echo -e "\twarning: Missing branded resource!\n\t\t${BRANDDIR}/${pngFile}"
  #     #(( count++ ))
  #   else
  #     # verify the branded file was actually modified
  #     # Compare the app shipped file vs the branded file.
  #     # If branded, they have to be different
  #     $CMP --quiet "${APPDIR}/${pngFile}" "${BRANDDIR}/${pngFile}"
  #     rc=$?;
  #     if (( $rc == 0 ))
  #     then
  #       # man cmp "An exit status of 0 means no differences were found,
  #       # 1 means some differences were found.."
  #       echo -e "\twarning: Resource not branded!\n\t\t${BRANDDIR}/${pngFile}"
  #       #(( count++ ))
  #     fi
  #   fi
  # done
  echo "copying App Icons to $assetCatalog/"

  # The script is not terminating the execution if it finds resources not
  # branded. Warnings are echoed instead.
  #test $count -eq 0 || \
  #  errExit "Branding kit must brand all required application icons" 1

  #echo -e "\tAll (${#CORE_APP_RESOURCES[@]}) application icons branded OK ..."
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Determine Allowed Languages
#
# Determines the languages allowed for branding (which could include
# added languages).
#
# Required Global Variables:
#   APPLANGS  (read)
#   ALLOWEDLANGS  (set)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function determineAllowedLanguages ()
{
  echo "Determining allowed languages for branding ..."
  local -i index=0

  # first get the list of allowed language directives (if specified)
  local -a langList=( $(readPlistValueAsList "$DIRECTIVESPLIST" "AllowedLanguages" "$NL") )
  if [ "${#langList[@]}" -gt 0 ]
  then
    # restrict the allowed languages to the languages that are both
    # defined in the allowed languages directive list and exist in
    # the application
    for l in "${langList[@]}"
    do
      containsElement "$l" "${APPLANGS[@]}"
      if [ $? -eq 0 ]
      then
        ALLOWEDLANGS[$index]="$l"
        (( index++ ))
      fi
    done
  else
    # any of the application languages are allowed
    ALLOWEDLANGS="${APPLANGS[@]}"
    index="${#APPLANGS[@]}"
  fi

  # finally, allow any specifically added language directives
  langList=( $(readPlistValueAsList "$DIRECTIVESPLIST" "AddedLanguages" "$NL") )
  for l in "${langList[@]}"
  do
    ALLOWEDLANGS[$index]="$l"
    (( index++ ))
  done

  echo -e "\t${ALLOWEDLANGS[@]}"
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Determine Web Credentials Associated Domains
#
# Determines the associated domains (web credentials) for branding.
#
# Required Global Variables:
#   DIRECTIVESPLIST  (read)
#   WEB_CREDENTIALS_ASSOCIATED_DOMAINS  (set)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function determineWebCredentialsAssociatedDomains
{
  echo "Determining web credentials associated domains for branding ..."

  readonly -a domainsList=( $(readPlistValueAsList "$DIRECTIVESPLIST" "WebCredentialsAssociatedDomains" "$NL") )
  if [ "${#domainsList[@]}" -gt 0 ]
  then
    local -i index=0
    for l in "${domainsList[@]}"
    do
      WEB_CREDENTIALS_ASSOCIATED_DOMAINS[$index]="$l"
      echo -e "\tAssociated Domain to be branded: $l."
      (( index++ ))
    done
  else
    echo -e "\tNo associated domains were provided to be branded."
  fi
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Apply Branding Name Changes
#
# Applies all branding-related name changes to the Info.plist.
#
# Required Global Variables:
#   DIRECTIVESPLIST  (read)
#   INFOPLIST  (read)
#   BUNDLENAME  (set)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function applyBrandingNameChanges ()
{
  echo "Applying branding name changes ..."
  local -i rc=0

  # handle the bundle identifier
  local key="CFBundleIdentifier"
  local value=$(readPlistValue "$DIRECTIVESPLIST" "$key")
  if [ -n "$value" ]
  then
    echo -e "\t${key}: ${value}"
    setPlistValue "$INFOPLIST" "$key" "$value"
    rc=$?; (( rc == 0 )) || \
      errExit "failed to update ${key}" $rc
  else
    errExit "${key} not defined!\n\t${key} is a required branding element!" 1
  fi

  # handle the bundle name
  key="CFBundleName"
  value=$(readPlistValue "$DIRECTIVESPLIST" "$key")
  if [ -n "$value" ]
  then
    echo -e "\t${key}: ${value}"
    # change the bundle name
    setPlistValue "$INFOPLIST" "$key" "$value"
    rc=$?; (( rc == 0 )) || \
      errExit "failed to update ${key}" $rc
    # set the bundle name
    BUNDLENAME="${value}"
  else
    errExit "${key} not defined!\n\t${key} is a required branding element!" 1
  fi

  # handle the bundle display name
  key="CFBundleDisplayName"
  value=$(readPlistValue "$DIRECTIVESPLIST" "$key")
  if [ -n "$value" ]
  then
    echo -e "\t${key}: ${value}"
    updatePlistValue "$INFOPLIST" "string" "$key" "$value"
    rc=$?; (( rc == 0 )) || \
      errExit "failed to update ${key}" $rc
  else
    deletePlistValue "$INFOPLIST" "$key"
  fi
}

function applyDarkModeChanges()
{
  echo "Applying Dark Mode changes ..."
  local -i rc=0
  # handle the bundle identifier
  local key="DisableDarkMode"
  local value=$(readPlistValue "$DIRECTIVESPLIST" "$key")
  if [ -n "$value" ]
  then
    echo -e "Setting DisableDarkMode \t${key}: ${value}"
    if [ $value == "true" ]
    then
      deletePlistValue "$INFOPLIST" "${key}"
      updatePlistValue "$INFOPLIST" "string" "UIUserInterfaceStyle" "Light"
    fi
    rc=$?; (( rc == 0 )) || \
      errExit "failed to update ${key}" $rc
  else
    echo "${key} not defined in Directives file"
  fi
}

function applyCrashlyticsChanges()
{
    echo "Applying Crashlytics changes ..."
    local -i rc=0
    # handle the bundle identifier
    local key="DisableCrashLogging"
    local value=$(readPlistValue "$DIRECTIVESPLIST" "$key")
    if [ -n "$value" ]
    then
      echo -e "Setting Crash Logging \t${key}: ${value}"
      if [ $value == "true" ]
      then
        deletePlistValue "$INFOPLIST" "FirebaseCrashlyticsCollectionEnabled"
        updatePlistValue "$INFOPLIST" "bool" "FirebaseCrashlyticsCollectionEnabled" "false"
      fi
      rc=$?; (( rc == 0 )) || \
        errExit "failed to update ${key}" $rc
    else
      echo "${key} not defined in Directives file"
    fi
}

function applyBrandingDeviceFamilyChanges()
{
  echo "Applying Device Family changes ..."
  local -i rc=0

  # handle the bundle identifier
  local key="UIDeviceFamily"
  local value=$(readPlistValue "$DIRECTIVESPLIST" "$key")
  if [ -n "$value" ]
  then
    echo -e "Setting UIDeviceFamily \t${key}: ${value}"
    deletePlistValue "$INFOPLIST" "${key}"
    addPlistArray "$INFOPLIST" "${key}"
    if [ $value == "iphone" ]
    then
      addPlistValue "$INFOPLIST" "integer" "$key:0" "1"
    else
      if [ $value == "ipad" ]
      then
        addPlistValue "$INFOPLIST" "integer" "$key:0" "2"
      else
        addPlistValue "$INFOPLIST" "integer" "$key:0" "1"
        addPlistValue "$INFOPLIST" "integer" "$key:1" "2"
      fi
    fi
    rc=$?; (( rc == 0 )) || \
      errExit "failed to update ${key}" $rc
  else
    echo "${key} not defined!\n\t${key}"
    # errExit "${key} not defined!\n\t${key} is a required branding element!" 1
  fi
}


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Apply Application URL Scheme Changes
#
# Applies all branding-related URL Scheme changes to the Info.plist.
#
# Required Global Variables:
#   DIRECTIVESPLIST  (read)
#   INFOPLIST  (read)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function applyBrandingURLSchemeChanges ()
{
  checkAppSupportForBundleURLSchemes
  local -i countURLTypesInfoPlist=$?
  if [ $countURLTypesInfoPlist -gt 0 ]; then

    echo "Checking for application bundle URL scheme changes ..."
    local -i rc=0

    # The app uses url schemes.
    # Check if url schemes have been disabled in Branding Directives file.
    local key="EnableBundleURLSchemeHandling"
    local value=$(readPlistValue "$DIRECTIVESPLIST" "$key")
    if [[ $value =~ $RE_NO ]]; then
      # url schemes disabled. Remove the url scheme entries from the Info.plist
      deletePlistValue "$INFOPLIST" "${keyBundleURLTypes}"

      echo -e "\tDisabled support for bundle URL schemes"
    else
      # There are urls schemes defined in Branding Directives files. These have
      # to replace those in the Info.plist of the app.
      if [ $countURLTypesInfoPlist -gt 1 ]; then
        echo -e "\twarning: Application has definitions for several ($countURLTypesInfoPlist)" \
                " bundle URL definitions. \n\tBranding will be applied to element 0."
      fi

      # The app uses url schemes and they have not been disabled during branding.
      # Check if url schemes have been defined in the Branding Directives file.
      local valueName=$(readPlistValue "$DIRECTIVESPLIST" "$keyBundleURLName")
      if [ -n "$valueName" ]; then

        # scheme name specified in Branding Directives, replace it in Info.plist
        updateCFBundleURLNameInAppInfoPlist "$valueName"
        rc=$?; (( rc == 0 )) || \
          errExit "failed to update ${keyBundleURLTypes}:0:${keyBundleURLName}" $rc
      else
        # New name for the bundle url not specified. Change the name to
        # match the bundle id.
        updateCFBundleURLNameInAppInfoPlist "$BUNDLEID"
        rc=$?; (( rc == 0 )) || \
          errExit "failed to update ${keyBundleURLTypes}:0:${keyBundleURLName}" $rc
      fi

      local keySchemes="CFBundleURLSchemes"
      local -a schemeList=( $(readPlistValueAsList "$DIRECTIVESPLIST" "$keySchemes" "$NL") )
      if [ ${#schemeList[@]} -gt 0 ]; then
        # url schemes specified in Branding Directives, replace those in Info.plist
        # schemeList may contain several schemes.
        local key="${keyBundleURLTypes}:0:${keySchemes}"
        deletePlistValue "$INFOPLIST" "${key}"

        # this adds back the (empty) array of schemes
        updatePlistValue "$INFOPLIST" "array" "${key}"

        local -i index=0;
        for l in "${schemeList[@]}"
        do
          key="${keyBundleURLTypes}:0:${keySchemes}:${index}"
          echo -e "\t${keySchemes}:${index}: ${l}"
          updatePlistValue "$INFOPLIST" "string" "${key}" "$l"
          rc=$?; (( rc == 0 )) || \
            errExit "failed to update ${key}" $rc

          (( index++ ))
        done
      fi
    fi
  fi
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Apply Application Queries Schemes Changes
#
# Applies all branding-related Application Queries Schemes changes to the Info.plist.
# These are the URL Schemes the application uses (as opposed the ones the application
# handles).
#
# Required Global Variables:
#   DIRECTIVESPLIST  (read)
#   INFOPLIST  (read)
#   keyApplicationQueriesSchemes
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function applyBrandingApplicationQueriesSchemesChanges
{
  checkAppSupportForApplicationQueriesSchemes
  local -i countApplicationQueriesSchemesInInfoPlist=$?
  if [ $countApplicationQueriesSchemesInInfoPlist -gt 0 ]; then

    echo "Checking for application queries schemes changes ..."
    local -i rc=0

    # The app uses queries schemes. Now need to check if queries schemes
    # are specified in BrandingDirectives, if so, those replaces the ones
    # defined in the app's Info.plist.
    local -a schemeList=( $(readPlistValueAsList "$DIRECTIVESPLIST" "$keyApplicationQueriesSchemes" "$NL") )
    if [ ${#schemeList[@]} -gt 0 ]; then

      local schemeListToEcho=( $(readPlistValueAsList "$DIRECTIVESPLIST" "$keyApplicationQueriesSchemes" ",") )
      echo -e "\t${keyApplicationQueriesSchemes}: ${schemeListToEcho}"

      # schemes specified in Branding Directives, replace those in Info.plist
      # schemeList may contain several schemes.
      local key="${keyApplicationQueriesSchemes}"
      deletePlistValue "$INFOPLIST" "${key}"

      # this adds back the (empty) array of schemes
      updatePlistValue "$INFOPLIST" "array" "${key}"

      local -i index=0;
      for l in "${schemeList[@]}"
      do
        key="${keyApplicationQueriesSchemes}:${index}"
        updatePlistValue "$INFOPLIST" "string" "${key}" "$l"
        rc=$?; (( rc == 0 )) || \
          errExit "failed to update ${key}" $rc

        (( index++ ))
      done
    fi
  fi
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Prompts to enter a valid version.  If prompting is disabled, then
# this function generates an error.
#
# DUE TO USER PRPOMPTING, THIS FUNCTION SHOULD NOT BE CALLED AS A
# SUB-SHELL invocation!
#
# $1: the prompt
# $2: version key
# $3: the default version value
# $4: the version matching RE
# $5: the source context (if any)
#
# The prompted version is assigned to $globalReturnValue.
#
# Required Global Variables:
#   PROMPTS  (read)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function promptForVersion ()
{
  local prompt=$1
  local key=$2
  local defaultVersion=$3
  local versionRE=$4
  local sourceContext=$5

  globalReturnValue=""

  if (( PROMPTS == 1 ))
  then
    local response
    local -i valid=0
    until (( valid == 1 ))
    do
      echo -n "${prompt} (${key}) [${defaultVersion}]: "
      read response
      echo $response >> "$LOG"
      if [ -z "$response" ]
      then
        response=$defaultVersion
      fi
      if [[ $response =~ $RE_LEADING_ZEROS ]]
      then
        echo "Version elements cannot contain leading zeros!"
      elif [[ ! $response =~ $versionRE ]]
      then
        local msg="Invalid version format!"
        if [ "$versionRE" = "$RE_BUNDLE_VERSION" ]
        then
          msg="${msg}  Choose one of: # | #.# | #.#.# | #.#.#.#"
        elif [ "$versionRE" = "$RE_SHORT_VERSION" ]
        then
          msg="${msg}  Expecting: #.#.#"
        fi
        echo "$msg"
      else
        valid=1
      fi
    done
    globalReturnValue=$response
  else
    # no prompt; verify the default
    if [[ ! $defaultVersion =~ $versionRE ]]
    then
      local msg=""
      if [ -n "$sourceContext" ]
      then
        msg="${sourceContext} "
      fi
      msg="${msg}${key}=${defaultVersion}\n\tdoes not match required format"
      if [ "$versionRE" = "$RE_BUNDLE_VERSION" ]
      then
        msg="${msg}\n\texpecting one of:  # | #.# | #.#.# | #.#.#.#"
      elif [ "$versionRE" = "$RE_SHORT_VERSION" ]
      then
        msg="${msg} (#.#.#)"
      fi
      errExit "$msg" 1
    elif [[ $defaultVersion =~ $RE_LEADING_ZEROS ]]
    then
      local msg=""
      if [ -n "$sourceContext" ]
      then
        msg="${sourceContext} "
      fi
      msg="${msg}${key}=${defaultVersion}\n\tversion elements cannot contain leading zeros"
      errExit "$msg" 1
    fi
    globalReturnValue=$defaultVersion
  fi
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Apply Branding Version Changes
#
# Applies all branding-related version changes to the Info.plist.
#
# When complete, the application must have a valid CFBundleVersion and
# a valid CFBundleShortVersionString.
#
# Required Global Variables:
#   DIRECTIVESPLIST  (read)
#   INFOPLIST  (read)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function applyBrandingVersionChanges ()
{
  echo "Applying branding version changes ..."
  local -i rc=0
  local key;
  local value;

  # first get the BroadSoftBuildVersion from the Info.plist (required)
  key="BroadSoftBuildVersion"
  local broadsoftBuildVersion=$(readPlistValue "$INFOPLIST" "$key")
  test -n "$broadsoftBuildVersion" || \
    errExit "Info.plist must contain the ${key} key" 1
  local broadsoftVersion=""
  local buildNumber=""
  if [[ $broadsoftBuildVersion =~ $RE_BROADSOFT_VERSION ]]
  then
    # capture the default build number; this will be validated next
    # of the value is actually needed
    buildNumber=${BASH_REMATCH[2]#.}

    # set the version to <major>.<minor>.<maint>
    broadsoftVersion=${BASH_REMATCH[1]}
  else
    errExit "Info.plist ${key}=${broadsoftVersion}\n\tdoes not match expected format" 1
  fi

  # next look for the official build number in the Info.plist (optional)
  key="BroadSoftBuildNumber"
  value=$(readPlistValue "$INFOPLIST" "$key")
  test -n "$value" || value=$buildNumber
  if [[ $value =~ $RE_NUM ]]
  then
    # use this value as the build number
    buildNumber=$value
  else
    # use 0
    buildNumber="0"
  fi

  # now look for a BrandingVersion definition in the directives;
  # assume 0 if undefined
  key="BrandingVersion"
  local brandingVersion="0";
  local -i referenceBrand=0
  value=$(readPlistValue "$DIRECTIVESPLIST" "$key")
  if [ -n "$value" ]
  then
    # pattern match for a branding version that begins with $BroadSoftBuildNumber
    if [[ $value =~ $RE_BROADSOFT_BUILD_NUMBER ]]
    then
      # This is a special value used for reference client branding that
      # indicates the build number is to be used as the branding version.
      # Be sure to include any digits trailing the number.
      brandingVersion="${buildNumber}${BASH_REMATCH[1]}"
      referenceBrand=1
    else
      brandingVersion=$value
    fi
  fi

  # perhaps verify the branding version with a prompt
  if (( referenceBrand == 0 ))
  then
    if (( PROMPTS == 1 ))
    then
      local response
      local -i valid=0
      until (( valid == 1 ))
      do
        echo -n "Verify the branding version [${brandingVersion}]: "
        read response
        echo $response >> "$LOG"
        if [ -z "$response" ]
        then
          response=$brandingVersion
        fi
        if [[ ! $response =~ $RE_NUM ]]
        then
          echo "Expecting whole number."
        else
          valid=1
        fi
      done
      brandingVersion=$response
    else
      if [[ ! $brandingVersion =~ $RE_NUM ]]
      then
        errExit "$(basename $DIRECTIVESPLIST) ${key}=${brandingVersion}\n\tdoes not match required whole number format" 1
      fi
    fi
  fi

  # next check the branding directives for a CFBundleVersion
  key="CFBundleVersion"
  local bundleVersion=$(readPlistValue "$DIRECTIVESPLIST" "$key")
  if [ -n "$bundleVersion" ]
  then
    # verify the bundle version
    promptForVersion \
      "Verify the internal version" \
      "$key" \
      "$bundleVersion" \
      "$RE_BUNDLE_VERSION" \
      "$(basename $DIRECTIVESPLIST)"
    bundleVersion=$globalReturnValue
  else
    # no bundle version in the directives; use the default
    # (the pattern match only works with shopt -s extglob)
    bver=${brandingVersion##+(0)}
    if [ -z "$bver" ]
    then
      bver="0"
    fi
    bundleVersion="${broadsoftVersion}.${bver}"
  fi

  # finally set the CFBundleShortVersionString; check the directives
  key="CFBundleShortVersionString"
  local shortVersion=$(readPlistValue "$DIRECTIVESPLIST" "$key")
  if [ -z "$shortVersion" ]
  then
    # either the directives do not define a short version, or the
    # format is invalid; the default is a concatentation of the
    # BroadSoft <major>.<minor>.<maint> with the branding version
    if (( referenceBrand == 1 ))
    then
      shortVersion="${broadsoftVersion}"
    else
      shortVersion="${broadsoftVersion}${brandingVersion}"
    fi
  fi

  # verify the short version string
  promptForVersion \
    "Verify the publishing version" \
    "$key" \
    "$shortVersion" \
    "$RE_SHORT_VERSION" \
    "$(basename $DIRECTIVESPLIST)"
  shortVersion=$globalReturnValue

  echo "Selected versions:"
  echo -e "\tBroadSoft Build: ${broadsoftBuildVersion}"
  if (( referenceBrand == 0 ))
  then
    echo -e "\tBranding Version: ${brandingVersion}"
  fi
  echo -e "\tBundle Version: ${bundleVersion}"
  echo -e "\tShort Version String: ${shortVersion}"

  # update the Info.plist with the version values
  key="CFBundleVersion"
  updatePlistValue "$INFOPLIST" "string" "$key" "$bundleVersion"
  rc=$?; (( rc == 0 )) || \
    errExit "failed to update ${key}" $rc

  key="CFBundleShortVersionString"
  updatePlistValue "$INFOPLIST" "string" "$key" "$shortVersion"
  rc=$?; (( rc == 0 )) || \
    errExit "failed to update ${key}" $rc
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Apply Branding Code Changes
#
# Applies the branding code to the Info.plist.
#
# Required Global Variables:
#   DIRECTIVESPLIST  (read)
#   INFOPLIST  (read)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function applyBrandingCodeChanges ()
{
  local -i rc=0

  # handle the BroadSoft branding code
  local key="BroadSoftBrandingCode"
  local value=$(readPlistValue "$DIRECTIVESPLIST" "$key")
  if [ -n "$value" ]
  then
    echo "Applying branding code changes ..."
    echo -e "\t${key}: ${value}"
    updatePlistValue "$INFOPLIST" "string" "$key" "$value"
    rc=$?; (( rc == 0 )) || \
      errExit "failed to update ${key}" $rc
  fi
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Apply App Transport Security Changes
#
# Applies all branding-related App Transport Security changes to the
# Info.plist.
#
# Required Global Variables:
#   DIRECTIVESPLIST  (read)
#   INFOPLIST  (read)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function applyAppTransportSecurityChanges ()
{
  local -i rc=0

  # see if ATS checks are disabled
  local keyDisable="DisableAppTransportSecurityChecks"
  local value=$(readPlistValue "$DIRECTIVESPLIST" "$keyDisable")
  if [[ $value =~ $RE_YES ]]
  then
    # make no changes
    echo "Skipping App Transport Security checks"
    echo -e "\t${keyDisable}: ${value}"
  else
    # first, remove the existing ATS settings, if any
    echo "Applying App Transport Security settings ..."
    echo -e "\tSetting default values."
    keyAts="NSAppTransportSecurity"
    deletePlistValue "$INFOPLIST" "$keyAts"
    rc=$?; (( rc == 0 )) || \
      errExit "failed to remove ${keyAts}" $rc

    # check for an ATS settings file
    local keyAtsSettingsFile="AppTransportSecuritySettingsFile"
    local atsSettingsFileName=$(readPlistValue "$DIRECTIVESPLIST" "$keyAtsSettingsFile");
    if [ -n "$atsSettingsFileName" ]
    then
      echo -e "\tMerging ${keyAtsSettingsFile}:\n\t\t${atsSettingsFileName}"

      # verify the file
      local atsSettingsFile="${BRANDDIR}/${atsSettingsFileName}"
      test -r $atsSettingsFile || \
        errExit "cannot read ${atsSettingsFile}" 1

      # extract the ATS dictionary from the settings file
      local atsExtractionFile="${WORKDIR}/ats.plist"
      $PLB -x -c "Print :${keyAts} dict " "$atsSettingsFile" 1>"$atsExtractionFile" 2>/dev/null
      rc=$?; (( rc == 0 )) || \
        errExit "ATS settings file does not contain ${keyAts} key" $rc

      # add the ATS key in the Info.plist
      addPlistDictionary "$INFOPLIST" "$keyAts"
      rc=$?; (( rc == 0 )) || \
        errExit "failed to add ${keyAts}" $rc

      # merge the extracted ATS settings into Info.plist
      $PLB -c "Merge '${atsExtractionFile}' :${keyAts}" "$INFOPLIST" 2>/dev/null
      rc=$?; (( rc == 0 )) || \
        errExit "failed to merge ${atsSettingsFile}" $rc
    fi
  fi
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Transfer Branding Resources
#
# Transfers all branding resource files from the resource kit into the
# app directory.
#
# Required Global Variables:
#   BRANDDIR  (read)
#   APPDIR  (read)
#   PROFILEPLIST  (read)
#   IPAROOT  (read)
#   ALLOWEDLANGS  (read)
#   APPSTORE_DIST (read)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function transferBrandingResources ()
{
  # get all files in the branding kit (path prefixes removed)
  pushd "$BRANDDIR" 1>/dev/null
  local IFS=$NL
  local -a fileList=( $(/usr/bin/find . -type f -print | /usr/bin/sed 's#^./##') )
  local -i rc=$?
  unset IFS
  (( rc == 0 )) || errExit "failed to gather branding files" $rc
  popd 1>/dev/null

  local -i generatedAssetsCatalogCAR=0

  # transfer each file that also exists in the APPDIR or is otherwise allowed
  echo "Transfering branding kit resources ..."
  for f in "${fileList[@]}"
  do
    # validate resource transfer
    if [[ $f =~ $RE_LANG ]]
    then
      # make sure branding is allowed for the language
      containsElement "${BASH_REMATCH[1]}" "${ALLOWEDLANGS[@]}"
      if [ $? -ne 0 ]
      then
        # language resource not allowed
        echo "[SKIP] ${f}"
        continue
      else
        local langDir=$(/usr/bin/dirname "${APPDIR}/${f}")
        if [ ! -d "$langDir" ]
        then
          # create the language directory
          /bin/mkdir "$langDir"
          rc=$?
          (( rc == 0 )) ||
            errExit "failed create language directory\n\t${langDir}" $rc
        fi
      fi
    elif [[ $f =~ $RE_ITUNESART ]]
    then
      # special handling for iTunesArtwork
      echo -n "[ART] "
      if (( APPSTORE_DIST == 1 ))
      then
        echo "skipping ${f} for AppStore distribution"
      else
        # strip the .png suffix
        /bin/cp -v "${BRANDDIR}/${f}" "${IPAROOT}/${f%.png}"
      fi
      continue
    elif [[ $f =~ $RE_WAV ]]
    then
      transferResource "$f"
      rc=$?
      (( rc == 0 )) ||
        errExit "failed to copy wav files\n\t $f"
    elif [[ $f =~ $RE_ASSET_CATALOG ]]
    then
      # check here if this file is part of an asset catalog.
      # if so, create the CAR file using all xcasset dirs in BRANDDIR.

      # if the xcassets are compiled already, skip this asset catalog file.
      (( generatedAssetsCatalogCAR == 1 )) && continue

      # get the app's deployment target value from app's Info.plist
      local minOSVersion=$(readPlistValue "$INFOPLIST" "MinimumOSVersion")
      rc=$?; (( rc == 0 )) || \
        errExit "failed to read minimum OS version" $rc

      # Get the target device (pre-obtained from Info.plist)
      local targetDeviceParam
      if (( $DEVICE_SUPPORTED_UNIVERSAL == 1 ))
      then
        targetDeviceParam="universal"
      elif (( $DEVICE_SUPPORTED_IPHONE == 1 ))
      then
        targetDeviceParam="iphone"
      else
          targetDeviceParam="ipad"
      fi

      # find the Icon name specificed in the plist and pass it to actool so that the icon
      # will be included in the Assets.CAR
      local -a iconArrayKeys=( \
        ":CFBundleIcons:CFBundlePrimaryIcon:CFBundleIconName" \
        ":CFBundleIcons~iphone:CFBundlePrimaryIcon:CFBundleIconName" \
        ":CFBundleIcons~ipad:CFBundlePrimaryIcon:CFBundleIconName" )
      local appIconName=""
      for key in "${iconArrayKeys[@]}"
      do
        local name=$(readPlistValue "$INFOPLIST" "$key")
        if [ ! -z $name ]
          then
          appIconName=$name
          break
        fi
      done



      # write to the console the Icon name that was found in the plist file
      echo "[ACTOOL] Passing $appIconName as value for --app-icon"
      $XCRUN actool --version
      # generate and copy the branded binary asset catalogs (Assets.CAR)
      # A single Assets.car file is generated for all the existing xsassets
      # directories.
      if [ ! -z $appIconName ]
        then
        /usr/bin/find -L "$BRANDDIR" -type d -name "*.xcassets" -print0 | \
          xargs -0 $XCRUN -sdk iphoneos \
             actool --compile "${APPDIR}" \
                    --platform iphoneos \
                    --minimum-deployment-target ${minOSVersion} \
                    --output-format human-readable-text \
                    --compress-pngs \
                    --notices \
                    --warnings \
                    --errors \
                    --app-icon $appIconName --output-partial-info-plist ${WORKDIR}/partial.plist
      else
        /usr/bin/find -L "$BRANDDIR" -type d -name "*.xcassets" -print0 | \
          xargs -0 $XCRUN -sdk iphoneos \
             actool --compile "${APPDIR}" \
                    --platform iphoneos \
                    --target-device ${targetDeviceParam}
                    --minimum-deployment-target ${minOSVersion} \
                    --output-format human-readable-text \
                    --compress-pngs \
                    --notices \
                    --warnings \
                    --errors
      fi
      # /usr/bin/find -L "$BRANDDIR" -type d -name "*.xcassets" -print0 | \
      #   xargs -0 $XCRUN -sdk iphoneos \
      #     actool --compile "${APPDIR}" \
      #     --platform iphoneos \
      #     --minimum-deployment-target ${minOSVersion} \
      #     --target-device ${targetDeviceParam} \
      #     --output-format human-readable-text \
      #     --compress-pngs \
      #     --notices \
      #     --warnings \
      #     --errors \
      #     --platform iphoneos --app-icon $appIconName --output-partial-info-plist ${WORKDIR}/partial.plist
      rc=$?
      (( rc == 0 )) ||
        errExit "failed create the compiled assets catalogs" $rc

      # Write to the console a line informing about the generation of CAR file.
      local xcassetsdirs=$( /usr/bin/find -L "$BRANDDIR" -type d -name "*.xcassets" -print0 )
      echo "[XCASSETS] ${xcassetsdirs} -> convert -> ${APPDIR}/Assets.car"

      # flag it as generated.
      generatedAssetsCatalogCAR=1

      # The CAR file is transfered already. Continue processing next file.
      continue

    elif [ ! -w "${APPDIR}/${f}" ]
    then
      # this is not a language resource, and there is no such file
      # in the app ... ignore it
      echo "[IGNORE] ${f}"
      continue
    fi

    # transfer the resource
      transferResource "$f"
    rc=$?; (( rc == 0 )) || exit $rc  # error message already printed
  done

  # now remove languages that are not allowed from the app
  pushd "$APPDIR" 1>/dev/null
  IFS=$NL
  fileList=( $(/usr/bin/find . -type d -name "*.lproj" -maxdepth 1 -print | /usr/bin/sed 's#^./##') )
  rc=$?
  unset IFS
  (( rc == 0 )) || errExit "failed to load application directories" $rc
  popd 1>/dev/null

  echo "Checking for languages to remove ..."
  for f in "${fileList[@]}"
  do
    if [[ $f =~ $RE_LANG ]]
    then
      # make sure the language is allowed
      containsElement "${BASH_REMATCH[1]}" "${ALLOWEDLANGS[@]}"
      if [ $? -ne 0 ]
      then
        # language not allowed; remove it
        echo "[DEL] ${APPDIR}/${f}"
        /bin/rm -r "${APPDIR}/${f}"
        rc=$?; (( rc == 0 )) || \
          errExit "failed to remove language" $rc
      fi
    fi
  done
}
