#!/bin/bash

########################################################################
#
# App Base utility for KitBuilder, App Branding & Branding Kit
#
# 2016 BroadSoft, Inc.
#
# This file contains common fuctions used by the signing & branding
# scripts.
#
########################################################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Define App Branding Variables
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# command constants
declare -r SORT=/usr/bin/sort
declare -r PLB=/usr/libexec/PlistBuddy

# constants
declare -r NL=$'\n'
declare -r RE_YES="1|[yY]|[tT]|[yY][eE][sS]|[tT][rR][uU][eE]"
declare -r RE_NO="0|[nN]|[fF]|[nN][oO]|[fF][aA][lL][sS][eE]"
declare -r RE_PNG_FILE=".+\.png$"
declare -r RE_SWIFT_DYLIB="^libswift.+\.dylib$"
declare -r SWIFT_SUPPORT_DIR="SwiftSupport"

declare -r keyBundleURLTypes="CFBundleURLTypes"
declare -r keyBundleURLName="CFBundleURLName"
declare -r keyApplicationQueriesSchemes="LSApplicationQueriesSchemes"

# local variables
declare -a CORE_APP_RESOURCE_UNIVERSE #base names as in Info.plist
declare -a CORE_APP_RESOURCES #full names as they appear in the shipped app dir.

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Contains Element
#
# Tests if a set of elements contains a value.
#
# $1: the value to find
# $n: one or more elements
# returns 0 if found; returns 1 otherwise
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function containsElement ()
{
  local v="$1"; shift
  local a=( $@ )
  local e
  for e in "${a[@]}"
  do
    if [ "$e" = "$v" ]
    then
      return 0
    fi
  done
  return 1
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Set Plist Value
#
# Sets a keyed value in a Plist file.  The key must already be present
# in the file, or an error is returned.
#
# $1: the Plist file
# $2: a plist key
# $3: the plist value
# returns 0 if the key was set; the PlistBuddy error code otherwise
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function setPlistValue ()
{
  $PLB -c "Set :'${2#:}' '${3}'" "$1" 2>/dev/null
  return $?
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Add Plist Value
#
# Adds a keyed value in a Plist file.  The key must already be present
# in the file, or an error is returned.
#
# $1: the Plist file
# $2: type of the value (string, integer)
# $3: the plist key
# $4: the plist value
# returns 0 if the key was set; the PlistBuddy error code otherwise
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function addPlistValue ()
{
  $PLB -c "Add :'${3}' ${2} ${4}" "$1" 2>/dev/null
  # $PLB -c "Add :'${2} : string ' '${3}'" "$1" 2>/dev/null
  return $?
}

function addPlistArray()
{
  # $PLB -c "Add :'${2#:}' array" "$1" 2>/dev/null
  $PLB -c "Add :'${2#:}' array" "$1" 2>/dev/null
  return $?
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Update Plist Value
#
# Adds or Sets a keyed string value in a Plist file.
#
# $1: the Plist file
# $2: the value data type (string, integer, data, etc.)
# $3: a plist key
# $4: the plist value
# returns 0 if the key was updated; the PlistBuddy error code otherwise
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function updatePlistValue ()
{
  $PLB -c "Add :'${3#:}' ${2} '${4}'" "$1" 2>/dev/null
  local -i rc=$?
  if (( rc == 1 ))
  then
    setPlistValue "$1" "$3" "$4"
    return $?
  else
    return $rc
  fi
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Delete Plist Value
#
# Deletes a keyed value from a Plist file if it exists.
#
# $1: the Plist file
# $2: a plist key
# returns 0 if the key was deleted (or did not exist in the first place);
#   the PlistBuddy error code otherwise
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function deletePlistValue ()
{
  $PLB -c "Delete :'${2#:}'" "$1" 1>/dev/null 2>/dev/null
  local -i rc=$?
  if (( rc == 1 ))
  then
    return 0  # the key didn't exist in the fist place
  else
    return $rc
  fi
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Count Plist Array Values
#
# Counts the number of elements in a Plist array.
#
# $1: the Plist file
# $2: a plist array key
# $3: the array element type (string, integer, data, etc.)
# echos the count
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function countPlistArrayValues ()
{
  $PLB -x -c "Print :'${2#:}'" "$1" 2>/dev/null | \
    /usr/bin/grep  "<${3}>" | \
    /usr/bin/wc -l
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Add Plist Dictionary
#
# Adds a keyed string dictionary to a Plist file.
#
# $1: the Plist file
# $2: a plist key
# returns 0 if the key was updated; the PlistBuddy error code otherwise
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function addPlistDictionary ()
{
  $PLB -c "Add :'${2#:}' dict" "$1" 2>/dev/null
  local -i rc=$?
  if (( rc == 1 ))
  then
    # already exists; OK
    return 0
  else
    return $rc
  fi
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Read Plist String Value
#
# Reads and returns a keyed string value from a Plist file.
#
# $1: the Plist file
# $2: a plist key
# $3: optional default value (unless specified by this parameter, an
#     empty string is assumed as the default value)
# echos the keyed value; the default if not found
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function readPlistValue ()
{
  local value=$($PLB -c "Print :'${2#:}'" "$1" 2>/dev/null)

  if [ -n "$value" ]
  then
    echo "$value"
  else
    if [ -n "$3" ]
    then
      echo "$3"
    else
      echo ""
    fi
  fi
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Read Plist Value as List
#
# Returns a list value from a Plist file.
#
# $1: a plist file
# $2: the directives key
# $3: the list item separator character; undefined use default ','
# echos the $1 list value as a string with the elements separated by
#   $3 chars
# returns 0 if found; 1 otherwise
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function readPlistValueAsList ()
{
  local v=$(readPlistValue "$1" "$2")
  if [ -n "$v" ]
  then
    if [ -n "$3" ]
    then
      echo "$v" | /usr/bin/sed 's/ //' | /usr/bin/tr "," "$3"
    else
      echo "$v" | /usr/bin/sed 's/ //'
    fi
    return 0
  else
    echo ""
    return 1
  fi
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Assert Branding Environment
#
# Verifies the enviornment is suitable to continue for app base tasks.
#
# exits on error
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function assertAppBaseEnvironment ()
{
  test -x $SORT || \
    errExit "cannot find the ${SORT} command" 1

  test -x $PLB || \
    errExit "cannot find the ${PLB} command" 1
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Add a png file to array
#
# Adds an icon file name (received as a parameter) and adds it to
# global array CORE_APP_RESOURCE_UNIVERSE only if the icon is not
# already in the array.
#
# Required Global Variables:
#   CORE_APP_RESOURCE_UNIVERSE  (set)
#
# $1: png file name to be added to array
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function addElementToCoreAppResourceUniverse ()
{
  # check Icon is already in the array
  containsElement "$1" "${CORE_APP_RESOURCE_UNIVERSE[@]}"
  if [ $? -eq 1 ]
  then
    # not in array, add it.
    local -i lastIdx=${#CORE_APP_RESOURCE_UNIVERSE[@]}
    CORE_APP_RESOURCE_UNIVERSE[$lastIdx]="$1"
  fi
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load the application icons listed in Info.plist into an array.
#
# Reads an array of App Icon files names from the Info.plist and adds
# them to the global array CORE_APP_RESOURCE_UNIVERSE.
#
#
# Required Global Variables:
#   INFOPLIST  (read)
#   CORE_APP_RESOURCE_UNIVERSE  (set)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function identifyAppIconCoreResourceUniverse
{
  # Below is the list of known keys for the AppIcons in the Info.plist

  local -a iconArrayKeys=( \
    ":CFBundleIconFiles" \
    ":CFBundleIconFiles~iphone" \
    ":CFBundleIconFiles~ipad" \
    ":CFBundleIcons:CFBundlePrimaryIcon:CFBundleIconFiles" \
    ":CFBundleIcons~iphone:CFBundlePrimaryIcon:CFBundleIconFiles" \
    ":CFBundleIcons~ipad:CFBundlePrimaryIcon:CFBundleIconFiles" )

  for key in "${iconArrayKeys[@]}"
  do
    local -i count=$(countPlistArrayValues "$INFOPLIST" "$key" "string")
    test $count -le 0 && continue

    local -i max=$count-1
    local -i i

    for i in $(eval echo {0..$max})
    do
      local fileName=$(readPlistValue "$INFOPLIST" "${key}:${i}" )
      local rc=$?; (( rc == 0 )) \
        || errExit "Failed to read application icon ${key}:${i}" $rc

      if [[ $fileName =~ $RE_PNG_FILE ]]
      then
        # for the moment, strip the extention for consistency
        fileName="${icon%.png}"
      fi

      addElementToCoreAppResourceUniverse "$fileName"
    done
  done
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load the application launch images listed in Info.plist into an array.
#
# Note: Function not used at the moment. Launch Images not verified.
#
# Reads an array of Launch Image files from the Info.plist and adds them
# to the global CORE_APP_RESOURCE_UNIVERSE array.
#
# Required Global Variables:
#   INFOPLIST  (read)
#   RE_PNG_FILE  (read)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function identifyLaunchImageCoreResourceUniverse
{
  local -i count
  local -i i
  local imageName
  count=$(countPlistArrayValues "$INFOPLIST" "UILaunchImages" "dict")
  local -i max=$count-1

  for i in $(eval echo {0..$max})
  do
    imageName=$(readPlistValue "$INFOPLIST" \
      "UILaunchImages:${i}:UILaunchImageName")

    local rc=$?; (( rc == 0 )) || \
      errExit "Failed to read launch image name for UILaunchImageName:${i}:UILaunchImageName" $rc

    if [ $imageName ]
    then
      if [[ $imageName =~ $RE_PNG_FILE ]]
      then
        # for the moment, strip the extention for consistency
        imageName = "${icon%.png}"
      fi

      # adds the PNG to the global array CORE_APP_RESOURCE_UNIVERSE
      # making sure no duplicate base names are added.
      addElementToCoreAppResourceUniverse "$imageName"
    fi
  done
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Copies previously identified resources into an array.
#
# Previously identified base name of resources are used by this function
# to find all matching resources in the provided <APPDIR> and finally
# copies them to global array CORE_APP_RESOURCES.
#
# Required Global Variables:
#   APPDIR  (read)
#   RE_PNG_FILE  (read)
#   CORE_APP_RESOURCE_UNIVERSE  (read)
#   CORE_APP_RESOURCES  (set)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function copyIdentifiedCoreAppResourcesToArray ()
{
  # load the list of all png files shipped with the app in the base AppDir
  local -a pngFilesInAppDir  # shipped PNGs with app
  local IFS=$NL # So fileNames with spaces are not split
  local -a allFiles=( $(ls -1 $APPDIR | grep "\.png$") )
  unset IFS

  for file in "${allFiles[@]}"
  do
    # save the list of names of all PNG files
    local -i lastIdx=${#pngFilesInAppDir[@]}
    pngFilesInAppDir[$lastIdx]="$file"
  done
  unset allFiles

  # The files in the app dir this script is interested in are those who
  # match a base names with possible known suffixes for AppIcons and
  # LaunchImages (@2x, @3x~ipad, etc). The known base names are those
  # listed in Info.plist.
  #
  # With the list of images that got shippied with the App and the
  # base names of AppIcons and LaunchImages as listed in the Info.plist
  # file, create a list of files that should be saved to global array CORE_APP_RESOURCES.

  # This regular expresion represent the known valid suffixes for AppIcons and LaunchImages
  # in PNG files that are listd in Info.plist
  local -r pngPatternRegex="(-Portrait)?(-568h)?(@[2-9]x)?(~iphone|~ipad)?(\.png|\.PNG)$"

  for fileBaseNameEntry in "${CORE_APP_RESOURCE_UNIVERSE[@]}"
  do
    # match for <baseName><validKnownPNGSuffix>?
    local regexWithEntry="^$fileBaseNameEntry$pngPatternRegex"
    for fileInAppDir in "${pngFilesInAppDir[@]}"
    do
      if [[ $fileInAppDir =~ $regexWithEntry ]]
      then
        local -i lastIdx=${#CORE_APP_RESOURCES[@]}
        CORE_APP_RESOURCES[$lastIdx]="$fileInAppDir"
      fi
    done
  done

  # remove duplicates in case there were pngs in info.plist named very similarily, like
  # application, application@2x. In these cases it causes duplicates in array CORE_APP_RESOURCES
  CORE_APP_RESOURCES=($(printf "%s\n" "${CORE_APP_RESOURCES[@]}" | $SORT -u))
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Identification of branded application icons and launch images
#
# Identifies the App Icons and Launch Images (as listed in application
# Info.plist) and saves the names of those resources in a global array.
#
# All identified resources are saved in an array called CORE_APP_RESOURCES
# which needs to be declared by caller of this function.
#
# Required Global Variables:
#   APPDIR  (read)
#   RE_PNG_FILE  (read)
#   CORE_APP_RESOURCE_UNIVERSE  (read)
#   CORE_APP_RESOURCES  (set)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function identifyCoreAppResources ()
{
  # load from Info.plist the list of AppIcons and puts them in global
  # array CORE_APP_RESOURCE_UNIVERSE
  identifyAppIconCoreResourceUniverse

  # load from Info.plist the list of LaunchImages and puts them in global
  # array CORE_APP_RESOURCE_UNIVERSE
  identifyLaunchImageCoreResourceUniverse

  # copies the identified App Icons & Launch Images to the CORE_APP_RESOURCES array,
  # which contains all App Icons and Launch images as shipped in the APP.
  copyIdentifiedCoreAppResourcesToArray
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Identification of branded application icons.
#
# Identifies the App Icons (as listed in application
# Info.plist) and saves the names of those resources in a global array.
#
# All identified resources are saved in an array called CORE_APP_RESOURCES
# which needs to be declared by caller of this function.
#
# Required Global Variables:
#   APPDIR  (read)
#   RE_PNG_FILE  (read)
#   CORE_APP_RESOURCE_UNIVERSE  (read)
#   CORE_APP_RESOURCES  (set)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function identifyCoreAppResourcesAppIconsOnly ()
{
  # load from Info.plist the list of AppIcons and puts them in global
  # array CORE_APP_RESOURCE_UNIVERSE
  identifyAppIconCoreResourceUniverse

  # copies the identified App Icons & Launch Images to the CORE_APP_RESOURCES array.
  copyIdentifiedCoreAppResourcesToArray
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Checks if the application supports Bundle URL Schemes
#
# This functions checks for the url scheme support by counting the number
# of bundle url scheme (dict elements) in the application's Info.plist
#
# Required Global Variables:
#   INFOPLIST  (read)
#
# returns 0 if bundle urls is not supported. A number greater than zero
#   indicates urls are supported and the number of bundle url schemes
#   definitions in the applications's Info.plist file.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function checkAppSupportForBundleURLSchemes ()
{
  local -i countURLTypesInfoPlist=$(countPlistArrayValues "$INFOPLIST" "$keyBundleURLTypes" "dict")
  return $countURLTypesInfoPlist
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Checks if the application supports Application Queries Schemes
#
# This functions checks for the application queries schemes support by
# counting the number queries schemes (dict elements) in the application's
# Info.plist
#
# Required Global Variables:
#   INFOPLIST  (read)
#
# returns 0 if queries schemes is not supported (not present). A number
#   greater than zero indicates queries schemes are supported and the
#   number of queries schemes definitions in the applications's
#   Info.plist file.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function checkAppSupportForApplicationQueriesSchemes ()
{
  local -i countQueriesSchemesInfoPlist=$(countPlistArrayValues "$INFOPLIST" "$keyApplicationQueriesSchemes" "string")
  return $countQueriesSchemesInfoPlist
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Updates the CFBundleURLName in the info PLIST to match the given
# input name.  This change is only applied for the first bundle URL
# type entry.
#
# Required Global Variables:
#   INFOPLIST  (read)
#
# $1: the name to use the bundle URL type
# returns 0 if the bundle URL name was updated; the PlistBuddy error
#   code otherwise
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function updateCFBundleURLNameInAppInfoPlist ()
{
  local key="${keyBundleURLTypes}:0:${keyBundleURLName}"
  echo -e "\t${keyBundleURLName}: ${1}"
  setPlistValue "$INFOPLIST" "${key}" "$1"
  return $?
}
